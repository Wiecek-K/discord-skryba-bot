{
  "name": "Save",
  "nodes": [
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "Wiecek-K",
          "mode": "list",
          "cachedResultName": "Wiecek-K",
          "cachedResultUrl": "https://github.com/Wiecek-K"
        },
        "repository": {
          "__rl": true,
          "value": "discord-knowledge-base-backup",
          "mode": "list",
          "cachedResultName": "discord-knowledge-base-backup",
          "cachedResultUrl": "https://github.com/Wiecek-K/discord-knowledge-base-backup"
        },
        "filePath": "={{ $json.body.channel_name }}/linki.md",
        "asBinaryProperty": false,
        "additionalParameters": {
          "reference": "dev"
        }
      },
      "id": "edb4cd2f-88e7-4160-ac43-311e3c9b0b03",
      "name": "1. Pobierz plik .md z gałęzi 'dev'",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1360,
        -432
      ],
      "webhookId": "f61ff381-bb8b-4378-952e-dca4e5c362bb",
      "alwaysOutputData": false,
      "credentials": {
        "githubApi": {
          "id": "9Jm1ye1aJP8vV0bT",
          "name": "GitHub account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Pobieramy dane z poprzednich kroków\n// Używamy .first() na wypadek, gdyby n8n zwrócił pusty item, co zapobiega błędom\nconst fileNodeResult = $input.first();\nconst proposalData = $('WebHook: Save').first().json.body\n\nlet currentContent = '';\nlet fileSha = null;\n\n// Sprawdzamy, czy plik istnieje. Węzeł GitHub nie zwraca błędu,\n// ale może zwrócić pusty wynik, jeśli plik nie zostanie znaleziony.\n// WAŻNE: W opcjach węzła \"1. Pobierz plik...\" ustaw \"Continue on Fail\" na true.\nif (fileNodeResult && fileNodeResult.json.content) {\n  // Plik istnieje, dekodujemy jego zawartość\n  currentContent = Buffer.from(fileNodeResult.json.content, 'base64').toString('utf8');\n  fileSha = fileNodeResult.json.sha;\n} else {\n  // Plik nie istnieje lub jest pusty, tworzymy nagłówek tabeli od zera.\n  currentContent = `| Link | Opis |\\n|---|---|`;\n}\n\n// --- Przygotowanie i czyszczenie danych do wstawienia ---\n\n// 1. Czyścimy opis: usuwamy znaki nowej linii i \"|\" które mogłyby zepsuć tabelę.\nconst sanitizedDescription = proposalData.description.replace(/\\r?\\n|\\r/g, ' ').replace(/\\|/g, ' ');\n\n// 2. Tworzymy zwięzły tytuł dla linku z opisu (np. pierwsze 80 znaków)\nlet linkTitle = `${proposalData.url}`.slice(0, 30);\nif (sanitizedDescription.length > 30) {\n  linkTitle += '...';\n}\n\n// 3. Tworzymy nowy, sformatowany wiersz tabeli Markdown\nconst newRow = `| [${linkTitle}](${proposalData.url}) | ${sanitizedDescription} |`;\n\n// Łączymy istniejącą treść z nowym wierszem, upewniając się, że jest tylko jedna nowa linia\nconst finalContent = currentContent.trim() + '\\n' + newRow;\n\n// Kodujemy finalną treść z powrotem do Base64\nconst base64Content = Buffer.from(finalContent).toString('base64');\n\n// Zwracamy wszystko, czego potrzebuje następny nod\nconst result = {\n  base64Content: base64Content,\n  sha: fileSha // Zwracamy sha (może być null, jeśli plik jest nowy)\n};\n\nreturn result;"
      },
      "id": "44c3009b-e842-4602-a4e5-fcc3eacf9039",
      "name": "2. Przygotuj nową treść pliku",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -432
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "Wiecek-K",
          "mode": "list",
          "cachedResultName": "Wiecek-K",
          "cachedResultUrl": "https://github.com/Wiecek-K"
        },
        "repository": {
          "__rl": true,
          "value": "discord-knowledge-base-backup",
          "mode": "list",
          "cachedResultName": "discord-knowledge-base-backup",
          "cachedResultUrl": "https://github.com/Wiecek-K/discord-knowledge-base-backup"
        },
        "filePath": "={{ $('WebHook: Save').item.json.body.channel_name }}/linki.md",
        "fileContent": "={{ $('2. Przygotuj nową treść pliku').item.json.base64Content }}",
        "commitMessage": "=Zasób dodany przez {{ $('WebHook: Save').item.json.body.proposer_name }}",
        "additionalParameters": {
          "branch": {
            "branch": "dev"
          }
        }
      },
      "id": "3cd8601c-f61c-488e-85d0-760c6bd0d6ba",
      "name": "3. Zapisz zmiany w gałęzi 'dev'",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -880,
        -432
      ],
      "webhookId": "cc72baaf-94f6-4539-8b2d-43e81090c26e",
      "credentials": {
        "githubApi": {
          "id": "9Jm1ye1aJP8vV0bT",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "={{ $('WebHook: Save').item.json.body.server_id }}",
          "mode": "id"
        },
        "channelId": {
          "__rl": true,
          "value": "={{ $('WebHook: Save').item.json.body.channel_id }}",
          "mode": "id"
        },
        "content": "=Gotowe! Zwój czeka na zatwierdzenie!\n",
        "options": {}
      },
      "id": "fdf1af4c-4228-4bbc-8de7-c7625a1c0b2f",
      "name": "4. Wyślij potwierdzenie na Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        -640,
        -432
      ],
      "webhookId": "a46a070e-8f5d-4ad7-b0a0-00ab375218a7",
      "credentials": {
        "discordBotApi": {
          "id": "dwyNA75geJMJ4AQV",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "skryba-save",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1568,
        -432
      ],
      "id": "70abdd0f-249a-4176-befb-8fc3723a7a62",
      "name": "WebHook: Save",
      "webhookId": "ef473205-7140-4143-a90d-564bbccedbb7"
    }
  ],
  "pinData": {},
  "connections": {
    "1. Pobierz plik .md z gałęzi 'dev'": {
      "main": [
        [
          {
            "node": "2. Przygotuj nową treść pliku",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "2. Przygotuj nową treść pliku": {
      "main": [
        [
          {
            "node": "3. Zapisz zmiany w gałęzi 'dev'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3. Zapisz zmiany w gałęzi 'dev'": {
      "main": [
        [
          {
            "node": "4. Wyślij potwierdzenie na Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WebHook: Save": {
      "main": [
        [
          {
            "node": "1. Pobierz plik .md z gałęzi 'dev'",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "27b8eaeb-6f31-418a-8b58-12f706408818",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "70067eb9aa902a06a7b0b8136b4a9690f056064b103e0cba4759bfc821393b41"
  },
  "id": "fhjkc8FmNd7ZmAGp",
  "tags": []
}
